---
- name: load variables
  tags: [common, secrets]
  include_vars: '{{ playbook_dir }}/secrets.env.yaml'

- name: check if cert manager exists
  shell:
    cmd: kubectl get service --all-namespaces
  delegate_to: 127.0.0.1
  register: kubectl_namespaces

# - name: Print kubectl get service --all-namespaces
#   debug:
#     var: kubectl_namespaces.stdout

- name: install cert manager
  shell:
    cmd: kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.3.1/cert-manager.yaml
  delegate_to: 127.0.0.1
  register: kubectl_cert
  when: kubectl_namespaces.stdout.find('cert-manager') == -1

# - name: Print kubectl apply output
#   debug:
#     var: kubectl_cert.stdout

- name: LetsEncrypt Production ClusterIssuer
  shell:
    cmd: cat files/lets-encrypt.yaml | envsubst | kubectl apply -f -
    chdir: '{{ playbook_dir }}/roles/base/cert-manager'
  environment:
    EMAIL: '{{ email.server_owner }}'
    API_TOKEN: '{{ cloudflare.api_token }}'
  delegate_to: 127.0.0.1
  register: kubectl_letsencrypt

- name: Print kubectl apply output
  debug:
    var: kubectl_letsencrypt.stdout

- name: request wilcard cert
  shell:
    cmd: kubectl apply -f files/wildcard-place.yaml
    chdir: '{{ playbook_dir }}/roles/base/cert-manager'
  delegate_to: 127.0.0.1
  register: kubectl_wildcard

- name: Print kubectl apply output
  debug:
    var: kubectl_wildcard.stdout

# TODO:
# Set Up Authentication with Traefik and k3s
# https://k3s.rocks/https-cert-manager-letsencrypt/
