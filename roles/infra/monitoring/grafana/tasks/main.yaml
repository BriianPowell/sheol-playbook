---
- name: load variables
  tags: [common, secrets]
  include_vars: '{{ playbook_dir }}/secrets.env.yaml'

# - name: check if grafana exists
#   shell:
#     cmd: kubectl get service --all-namespaces
#   delegate_to: 127.0.0.1
#   register: kubectl_namespaces

# - name: Print kubectl get service --all-namespaces
#   debug:
#     var: kubectl_namespaces.stdout

- name: create Grafana config
  shell:
    cmd: cat files/grafana-config.yaml | envsubst | kubectl apply -f -
    chdir: '{{ playbook_dir }}/roles/infra/monitoring/grafana'
  environment:
    API_URL: '{{ grafana.api_url }}'
    AUTH_URL: '{{ grafana.auth_url }}'
    TOKEN_URL: '{{ grafana.token_url }}'
    CLIENT_ID: '{{ grafana.client_id }}'
    CLIENT_SECRET: '{{ grafana.client_secret }}'
    ROOT_URL: '{{ grafana.root_url }}'
  delegate_to: 127.0.0.1
  register: kubectl_grafana_config

- name: apply Grafana data sources
  shell:
    cmd: kubectl apply -f files/grafana-data-sources.yaml
    chdir: '{{ playbook_dir }}/roles/infra/monitoring/grafana'
  delegate_to: 127.0.0.1
  register: kubectl_grafana_data_sources

- name: apply Grafana deployment
  shell:
    cmd: kubectl apply -f files/grafana.yaml
    chdir: '{{ playbook_dir }}/roles/infra/monitoring/grafana'
  delegate_to: 127.0.0.1
  register: kubectl_grafana_deployment

- name: apply Grafana ingress
  shell:
    cmd: kubectl apply -f files/grafana-ingress.yaml
    chdir: '{{ playbook_dir }}/roles/infra/monitoring/grafana'
  delegate_to: 127.0.0.1
  register: kubectl_grafana_dashboard
